#pragma once

// TODO: Change shift to be computed from mask?

// Blendstate operands ( 4 * 4 bits occupied )

#define DCFX_STATE_BLEND_ZERO 0x00000001
#define DCFX_STATE_BLEND_ONE 0x00000002
#define DCFX_STATE_BLEND_SRC_COLOR 0x00000003
#define DCFX_STATE_BLEND_INV_SRC_COLOR 0x00000004
#define DCFX_STATE_BLEND_SRC_ALPHA 0x00000005
#define DCFX_STATE_BLEND_INV_SRC_ALPHA 0x00000006
#define DCFX_STATE_BLEND_DST_ALPHA 0x00000007
#define DCFX_STATE_BLEND_INV_DST_ALPHA 0x00000008
#define DCFX_STATE_BLEND_DST_COLOR 0x00000009
#define DCFX_STATE_BLEND_INV_DST_COLOR 0x0000000a
#define DCFX_STATE_BLEND_MASK 0x0000ffff

// Blendstate operators( 2 * 3 bits occupied )

#define DCFX_STATE_BLEND_OPERATOR_ADD 0x00010000
#define DCFX_STATE_BLEND_OPERATOR_SUB 0x00020000
#define DCFX_STATE_BLEND_OPERATOR_REVSUB 0x00030000
#define DCFX_STATE_BLEND_OPERATOR_MIN 0x00040000
#define DCFX_STATE_BLEND_OPERATOR_MAX 0x00050000
#define DCFX_STATE_BLEND_OPERATOR_SHIFT 16
#define DCFX_STATE_BLEND_OPERATOR_MASK 0x003f0000

// Cull mode ( 1 * 2 bits occupied )

#define DCFX_STATE_CULL_CW 0x00400000 
#define DCFX_STATE_CULL_CCW 0x00800000
#define DCFX_STATE_CULL_SHIFT 22
#define DCFX_STATE_CULL_MASK 0x00c00000

// Depth Test ( 1 * 4 bits occupied )

#define DCFX_STATE_DEPTH_TEST_LESS 0x01000000
#define DCFX_STATE_DEPTH_TEST_LEQUAL 0x02000000
#define DCFX_STATE_DEPTH_TEST_EQUAL 0x03000000
#define DCFX_STATE_DEPTH_TEST_GEQUAL 0x04000000
#define DCFX_STATE_DEPTH_TEST_GREATER 0x05000000
#define DCFX_STATE_DEPTH_TEST_NOTEQUAL 0x06000000
#define DCFX_STATE_DEPTH_TEST_NEVER 0x07000000
#define DCFX_STATE_DEPTH_TEST_ALWAYS 0x08000000
#define DCFX_STATE_DEPTH_TEST_SHIFT 24
#define DCFX_STATE_DEPTH_TEST_MASK 0x0f000000

// Write mode ( 1 * 3 bits occupied )

#define DCFX_STATE_WRITE_COLOR 0x10000000
#define DCFX_STATE_WRITE_ALPHA 0x20000000
#define DCFX_STATE_WRITE_DEPTH 0x40000000
#define DCFX_STATE_WRITE_SHIFT 28
#define DCFX_STATE_WRITE_MASK 0x70000000

// TODO: Add MSAA flag.

#define DCFX_STATE_WRITE_ALL						\
    (DCFX_STATE_WRITE_COLOR | DCFX_STATE_WRITE_ALPHA | DCFX_STATE_WRITE_DEPTH)

#define DCFX_BLEND_FUNC(srcA, srcB, alphaA, alphaB)		\
    (srcA | (srcB << 4) | (alphaA << 8) | (alphaB << 12))

#define DCFX_OPERATOR_FUNC(srcOp, alphaOp)	\
    (srcOp | (alphaOp << 3))

#define DCFX_STATE_DEFAULT_BLEND		\
    (DCFX_BLEND_FUNC(				\
	DCFX_STATE_BLEND_ONE,			\
	DCFX_STATE_BLEND_ZERO,		\
	DCFX_STATE_BLEND_ONE,			\
	DCFX_STATE_BLEND_ZERO)		\
     | DCFX_OPERATOR_FUNC(			\
	 DCFX_STATE_BLEND_OPERATOR_ADD,	\
	 DCFX_STATE_BLEND_OPERATOR_ADD))

#define DCFX_STATE_ALPHA_BLEND		\
    (DCFX_BLEND_FUNC(				\
	DCFX_STATE_BLEND_SRC_ALPHA,		\
	DCFX_STATE_BLEND_INV_SRC_ALPHA,	\
	DCFX_STATE_BLEND_SRC_ALPHA,		\
	DCFX_STATE_BLEND_INV_SRC_ALPHA)	\
     | DCFX_OPERATOR_FUNC(			\
	 DCFX_STATE_BLEND_OPERATOR_ADD,	\
	 DCFX_STATE_BLEND_OPERATOR_ADD))

#define DCFX_STATE_CUSTOM_ALPHA_BLEND		\
    (DCFX_BLEND_FUNC(				\
	DCFX_STATE_BLEND_DST_ALPHA,		\
	DCFX_STATE_BLEND_INV_DST_ALPHA,	\
	DCFX_STATE_BLEND_DST_ALPHA,		\
	DCFX_STATE_BLEND_INV_DST_ALPHA)	\
     | DCFX_OPERATOR_FUNC(			\
	 DCFX_STATE_BLEND_OPERATOR_ADD,	\
	 DCFX_STATE_BLEND_OPERATOR_ADD))

#define DCFX_STATE_ADDATIVE_BLEND		\
    (DCFX_BLEND_FUNC(				\
	DCFX_STATE_BLEND_SRC_ALPHA,		\
	DCFX_STATE_BLEND_ONE,			\
	DCFX_STATE_BLEND_SRC_ALPHA,		\
	DCFX_STATE_BLEND_ONE)			\
     | DCFX_OPERATOR_FUNC(			\
	 DCFX_STATE_BLEND_OPERATOR_ADD,	\
	 DCFX_STATE_BLEND_OPERATOR_ADD))

#define DCFX_DEFAULT_STATE			\
    (DCFX_STATE_WRITE_ALL			\
     | DCFX_STATE_ALPHA_BLEND			\
     | DCFX_STATE_CULL_CCW			\
     | DCFX_STATE_DEPTH_TEST_LEQUAL)

#define DCFX_DEFAULT_STATE_NOBLEND		\
    (DCFX_STATE_WRITE_ALL			\
     | 0					\
     | DCFX_STATE_CULL_CCW			\
     | DCFX_STATE_DEPTH_TEST_LEQUAL)

#define DCFX_DEFAULT_STATE_ADDATIVE		\
    (DCFX_STATE_WRITE_ALL			\
     | DCFX_STATE_ADDATIVE_BLEND		\
     | DCFX_STATE_CULL_CCW			\
     | DCFX_STATE_DEPTH_TEST_LEQUAL)

// Primitive mode

#define DCFX_STATE_PT_TRIANGLES 0
#define DCFX_STATE_PT_TRIANGLESTRIP 1
#define DCFX_STATE_PT_LINES 2
#define DCFX_STATE_PT_LINESTRIP 3
#define DCFX_STATE_PT_POINTS 4

// TODO: Add reference value for alpha test.
// TODO: Add stencil flags.

// Mag filter ( 1 * 2 )

#define DCFX_SAMPLER_MAG_LINEAR 0x00000001
#define DCFX_SAMPLER_MAG_NEAREST 0x00000002
#define DCFX_SAMPLER_MAG_MASK 0x00000003

// Min filter ( 1 * 3 )

#define DCFX_SAMPLER_MIN_LINEAR 0x00000004
#define DCFX_SAMPLER_MIN_NEAREST 0x00000008
#define DCFX_SAMPLER_MIN_LINEAR_MIP_NEAREST 0x00000007
#define DCFX_SAMPLER_MIN_NEAREST_MIP_NEAREST 0x00000010
#define DCFX_SAMPLER_MIN_NEAREST_MIP_LINEAR 0x00000014
#define DCFX_SAMPLER_MIN_LINEAR_MIP_LINEAR 0x00000018
#define DCFX_SAMPLER_MIN_MASK 0x0000001c
#define DCFX_SAMPLER_MIN_SHIFT 2

// Comp mode ( 1 * 4 )

#define DCFX_SAMPLER_COMP_NEVER  0x00000020
#define DCFX_SAMPLER_COMP_ALWAYS 0x00000040
#define DCFX_SAMPLER_COMP_LESS   0x00000060
#define DCFX_SAMPLER_COMP_LEQUAL 0x00000080
#define DCFX_SAMPLER_COMP_NEQUAL 0x000000a0
#define DCFX_SAMPLER_COMP_GEQUAL 0x000000c0
#define DCFX_SAMPLER_COMP_GREATER 0x00000e0
#define DCFX_SAMPLER_COMP_MASK 0x000001e0
#define DCFX_SAMPLER_COMP_SHIFT 5

// Edge value S,T,R (3 * 3)

#define DCFX_SAMPLER_EDGE_REPEAT 0x00000200
#define DCFX_SAMPLER_EDGE_MIRRORED_REPEAT 0x00000400
#define DCFX_SAMPLER_EDGE_CLAMP 0x00000600
#define DCFX_SAMPLER_EDGE_CLAMP_BORDER 0x00000800
#define DCFX_SAMPLER_EDGE_MIRRORED_CLAMP 0x00000a00
#define DCFX_SAMPLER_EDGE_MASK 0x0003fe00
#define DCFX_SAMPLER_EDGE_SHIFT 9

#define DCFX_EDGE_FUNC(s, t, r) \
    (s | (t << 3) | (r << 6))

#define DCFX_SAMPLER_DEFAULT \
    (DCFX_SAMPLER_MAG_LINEAR | DCFX_SAMPLER_MIN_LINEAR | DCFX_EDGE_FUNC(DCFX_SAMPLER_EDGE_REPEAT, DCFX_SAMPLER_EDGE_REPEAT, DCFX_SAMPLER_EDGE_REPEAT)) 
